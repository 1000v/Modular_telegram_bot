from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler
import os
import pwd
import grp
import shutil
from datetime import datetime
import asyncio
import aiohttp
import time
import random
import logging
from typing import Optional, Tuple

logger = logging.getLogger(__name__)

COMMAND = 'files'
COMMAND_DESCRIPTION = '–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (Linux)'

__version__ = "1.0.0"
__doc__ = "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (Linux)"
__dependencies__ = ["pwdpy", "shutil", "aiohttp"]  # optional

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π
path_store = {}

def generate_path_id(path: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ø—É—Ç–∏"""
    import hashlib
    return hashlib.md5(path.encode()).hexdigest()[:8]

def store_path(path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    path_id = generate_path_id(path)
    path_store[path_id] = path
    return path_id

def get_path(path_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –ø–æ –µ–≥–æ ID"""
    return path_store.get(path_id)

def format_size(size: int):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size < 1024:
            return f"{size:.1f} {unit}"
        size /= 1024
    return f"{size:.1f} PB"

async def upload_to_fileio(file_path: str, update: Update, context) -> Optional[str]:
    """Upload file to file.io and return download link"""
    try:
        file_size = os.path.getsize(file_path)
        loading_messages = context.application.bot_data.get('loading_messages', ["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..."])
        progress_message = await update.callback_query.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞–ª–∞—Å—å...\n"
            f"[{'_' * 10}] 0%\n"
            f"‚ö° 0 MB/s\n\n"
            f"üí≠ {random.choice(loading_messages)}"
        )
        
        start_time = time.time()
        last_update = start_time
        last_size = 0
        message_index = 0
        upload_complete = False
        
        async def update_progress():
            nonlocal last_update, last_size, message_index
            while not upload_complete:
                try:
                    current_time = time.time()
                    elapsed = current_time - start_time
                    
                    if current_time - last_update >= 2:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                        current_size = last_size + 1024 * 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1MB
                        if current_size > file_size:
                            current_size = file_size
                            
                        progress = min(current_size / file_size * 100, 100)
                        speed = (current_size - last_size) / (current_time - last_update) / 1024 / 1024  # MB/s
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        filled = int(progress / 10)
                        progress_bar = f"{'‚ñà' * filled}{'_' * (10 - filled)}"
                        
                        # –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if int(elapsed) % 15 == 0 and elapsed > 0:
                            message_index = (message_index + 1) % len(loading_messages)
                        
                        await progress_message.edit_text(
                            f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}\n"
                            f"[{progress_bar}] {progress:.1f}%\n"
                            f"‚ö° {speed:.1f} MB/s\n\n"
                            f"üí≠ {loading_messages[message_index]}"
                        )
                        
                        last_size = current_size
                        last_update = current_time
                    
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.error(f"Error in progress update: {e}")
                    await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        progress_task = asyncio.create_task(update_progress())
        
        async with aiohttp.ClientSession() as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f)
                data.add_field('expires', '30m')
                
                async with session.post('https://file.io', data=data) as response:
                    result = await response.json()
                    upload_complete = True
                    
                    if response.status == 200:
                        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        await progress_task
                        
                        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await progress_message.edit_text(
                            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                            f"[{'‚ñà' * 10}] 100%\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"‚è± –í—Ä–µ–º—è: {int(time.time() - start_time)} —Å–µ–∫"
                        )
                        await asyncio.sleep(2)
                        await progress_message.delete()
                        return result.get('link')
        
        upload_complete = True
        await progress_task
        await progress_message.delete()
    except Exception as e:
        logger.error(f"Error uploading to file.io: {e}")
        if 'progress_message' in locals():
            await progress_message.delete()
        if 'progress_task' in locals():
            progress_task.cancel()
    return None

async def update_progress(message, current, total, start_time):
    """Update progress message for direct file sending"""
    try:
        progress = min(current / total * 100, 100)
        filled = int(progress / 10)
        progress_bar = f"{'‚ñà' * filled}{'_' * (10 - filled)}"
        
        elapsed = time.time() - start_time
        speed = current / elapsed / 1024 / 1024  # MB/s
        
        await message.edit_text(
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...\n"
            f"[{progress_bar}] {progress:.1f}%\n"
            f"‚ö° {speed:.1f} MB/s"
        )
    except Exception as e:
        logger.error(f"Error updating progress: {e}")

async def handle_file_download(update: Update, context, file_path: str) -> None:
    """Handle file download based on size"""
    try:
        file_size = os.path.getsize(file_path)
        max_file_size = 50 * 1024 * 1024  # Default 50MB
        
        if hasattr(context.application.bot_data, 'config'):
            max_file_size = context.application.bot_data.config.get('max_file_size', max_file_size)
        
        if file_size > max_file_size:
            link = await upload_to_fileio(file_path, update, context)
            if link:
                await update.callback_query.message.reply_text(
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
                    f"üìé –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç):\n{link}"
                )
            else:
                await update.callback_query.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            progress_message = await update.callback_query.message.reply_text(
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é...\n"
                f"[{'_' * 10}] 0%"
            )
            
            start_time = time.time()
            try:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=open(file_path, 'rb'),
                    filename=os.path.basename(file_path),
                    progress=lambda current, total: asyncio.create_task(
                        update_progress(progress_message, current, total, start_time)
                    )
                )
            finally:
                await progress_message.delete()
            
    except Exception as e:
        await update.callback_query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def launch_file(file_path: str) -> Tuple[bool, str]:
    """Launch a file using xdg-open"""
    try:
        os.system(f"xdg-open '{file_path}'")
        return True, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"

async def handle_button(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    data = query.data

    if data == "files_list":
        current_path = context.user_data.get('current_path', '/')
        await list_directory(update, context, current_path)
        
    elif data.startswith("files_open:"):
        path_id = data.split(":", 1)[1]
        path = get_path(path_id)
        if not path:
            await query.answer("–û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        context.user_data['current_path'] = path
        
        if os.path.isfile(path):
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            stats = os.stat(path)
            owner = pwd.getpwuid(stats.st_uid).pw_name
            group = grp.getgrgid(stats.st_gid).gr_name
            perms = oct(stats.st_mode)[-3:]
            
            text = (
                f"üìÑ –§–∞–π–ª: {os.path.basename(path)}\n"
                f"üì¶ –†–∞–∑–º–µ—Ä: {format_size(stats.st_size)}\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group}\n"
                f"üîí –ü—Ä–∞–≤–∞: {perms}\n"
                f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"files_download:{path_id}"),
                    InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"files_launch:{path_id}")
                ],
                [InlineKeyboardButton("üìÇ –ù–∞–∑–∞–¥", callback_data="files_list")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(text, reply_markup=reply_markup)
            
        else:
            await list_directory(update, context, path)
            
    elif data.startswith("files_download:"):
        path_id = data.split(":", 1)[1]
        path = get_path(path_id)
        if path:
            await handle_file_download(update, context, path)
        else:
            await query.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
    elif data.startswith("files_launch:"):
        path_id = data.split(":", 1)[1]
        path = get_path(path_id)
        if path:
            success, message = await launch_file(path)
            await query.answer(message, show_alert=True)
        else:
            await query.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def list_directory(update: Update, context, path=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if path is None:
        path = '/'
    
    try:
        items = os.listdir(path)
        keyboard = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        dirs = []
        files = []
        for item in items:
            full_path = os.path.join(path, item)
            if os.path.isdir(full_path):
                dirs.append((item, full_path))
            else:
                files.append((item, full_path))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏
        for name, full_path in sorted(dirs):
            path_id = store_path(full_path)
            keyboard.append([InlineKeyboardButton(
                f"üìÅ {name}", 
                callback_data=f"files_open:{path_id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for name, full_path in sorted(files):
            path_id = store_path(full_path)
            keyboard.append([InlineKeyboardButton(
                f"üìÑ {name}", 
                callback_data=f"files_open:{path_id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Ä—Ö", –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
        if path != '/':
            parent_id = store_path(os.path.dirname(path))
            keyboard.append([InlineKeyboardButton(
                "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", 
                callback_data=f"files_open:{parent_id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {path}",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {path}",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"
        if update.callback_query:
            await update.callback_query.message.edit_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def files_command(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await list_directory(update, context, '/')

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è"""
    app.add_handler(CommandHandler(COMMAND, files_command))
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^files_"))
