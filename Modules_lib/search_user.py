from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler
import requests
import base64
import logging
import os

logger = logging.getLogger(__name__)

COMMAND = 'search'
COMMAND_DESCRIPTION = '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'

__version__ = "1.0.0"
__doc__ = "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
__dependencies__ = ["base64", "requests"]  # optional

# ProbivAPI secret key - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
PROBIVAPI_KEY = "e45d3b64-585e-4e1d-9f42-ab9f5e7dddc4"

def get_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ PythonAnywhere"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ PythonAnywhere
    is_pythonanywhere = os.environ.get('PYTHONANYWHERE_SITE', False)
    
    if is_pythonanywhere:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ PythonAnywhere
        proxies = {
            'http': 'http://proxy.server:3128',
            'https': 'http://proxy.server:3128'
        }
        session = requests.Session()
        session.proxies = proxies
        return session
    else:
        return requests.Session()

async def search_by_phone(phone):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ ProbivAPI"""
    url = f"https://probivapi.com/api/phone/info/{phone}"
    pic_url = f"https://probivapi.com/api/phone/pic/{phone}"
    
    headers = {
        "X-Auth": PROBIVAPI_KEY
    }
    
    try:
        session = get_session()
        response = session.get(url, headers=headers)
        json_response = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö API
        callapp_data = json_response.get('callapp', {})
        callapp_api_name = callapp_data.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
        callapp_emails = ', '.join([email.get('email') for email in callapp_data.get('emails', [])])
        callapp_websites = ', '.join([site.get('websiteUrl') for site in callapp_data.get('websites', [])])
        callapp_addresses = ', '.join([addr.get('street') for addr in callapp_data.get('addresses', [])])
        
        eyecon_api_name = json_response.get('eyecon', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
        viewcaller_name_list = [tag.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ') for tag in json_response.get('viewcaller', [])]
        viewcaller_api_name = ', '.join(viewcaller_name_list)
        
        result = f"""‚îè ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É {phone}
‚î£ üì± –§–ò–û (CallApp): {callapp_api_name}
‚î£ üìß Email: {callapp_emails}
‚î£ üåê –°–∞–π—Ç—ã: {callapp_websites}
‚î£ üè† –ê–¥—Ä–µ—Å–∞: {callapp_addresses}
‚î£ üåê –§–ò–û (EyeCon): {eyecon_api_name}
‚î£ üîé –§–ò–û (ViewCaller): {viewcaller_api_name}"""
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

async def search_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    if not context.args:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="search_phone")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/search +79XXXXXXXXX",
            reply_markup=reply_markup
        )
        return

    phone = context.args[0]
    result = await search_by_phone(phone)
    await update.message.reply_text(result)

async def button_callback(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "search_phone":
        await query.message.edit_text(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/search +79XXXXXXXXX"
        )

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è"""
    app.add_handler(CommandHandler(COMMAND, search_command))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^search_"))
    logger.info(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è {COMMAND}')
