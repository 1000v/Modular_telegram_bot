import os
import requests
from yandex_music import Client
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, TIT2, TPE1, TALB, USLT
import logging
import re
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaAudio
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# Command settings
COMMAND = 'music'
COMMAND_DESCRIPTION = '–°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏'

__version__ = "1.0.0"
__doc__ = "–°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"
__dependencies__ = ["yandex_music", "mutagen"]  # optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DOWNLOAD_FOLDER = os.path.join('music')
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

file_handler = logging.FileHandler(os.path.join(DOWNLOAD_FOLDER, 'download_log.txt'), encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
client = None

def init_client(token):
    global client
    if client is None:
        client = Client(token).init()

def sanitize_filename(filename):
    return re.sub(r'[<>:"/\\|?*]', '_', filename)

def get_best_mp3_format(formats, quality='–û–ø—Ç–∏–º–∞–ª—å–Ω–æ'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ MP3"""
    if not formats:
        return None
        
    mp3_formats = [fmt for fmt in formats if fmt.codec == 'mp3']
    if not mp3_formats:
        return None

    if quality == 'Lossless':
        quality = '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ'  # Lossless –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è mp3

    if quality == '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ':
        return max(mp3_formats, key=lambda x: x.bitrate_in_kbps)
    elif quality == '–≠–∫–æ–Ω–æ–º–∏—è':
        return min(mp3_formats, key=lambda x: x.bitrate_in_kbps)
    return mp3_formats[0]

def is_mp3_corrupted(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ MP3 —Ñ–∞–π–ª–∞"""
    try:
        audio = MP3(filename, ID3=ID3)
        audio.pprint()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        return False
    except Exception as e:
        logger.error(f"–§–∞–π–ª {filename} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
        return True

async def download_track(track_info, message, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞"""
    try:
        track_title = sanitize_filename(track_info.title)
        artist_name = sanitize_filename(track_info.artists[0].name)
        
        folder_path = os.path.join(DOWNLOAD_FOLDER, str(message.chat.id))
        os.makedirs(folder_path, exist_ok=True)
        filename = os.path.join(folder_path, f"{artist_name} - {track_title}.mp3")
        
        await message.edit_text(f"‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {artist_name} - {track_title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            download_info = track_info.get_download_info()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            download_info = None
            
        if not download_info:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            try:
                download_info = await context.bot.loop.run_in_executor(
                    None, 
                    lambda: client.tracks_download_info(track_info.id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                await message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track_title}")
                return None
        
        if not download_info:
            await message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {track_title}")
            return None
        
        # –ï—Å–ª–∏ download_info - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if not isinstance(download_info, list):
            download_info = [download_info]
            
        selected_format = get_best_mp3_format(download_info)
        if not selected_format:
            await message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫–∞ {track_title}")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫
        await message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é: {artist_name} - {track_title}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ API
            selected_format.download(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track_title}: {e}")
            try:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ URL
                url = selected_format.get_direct_link()
                response = requests.get(url)
                with open(filename, 'wb') as f:
                    f.write(response.content)
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track_title}: {e2}")
                await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track_title}")
                return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        if is_mp3_corrupted(filename):
            os.remove(filename)
            await message.edit_text(f"‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {track_title}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            audio = MP3(filename, ID3=ID3)
            if audio.tags is None:
                audio.add_tags()
            
            audio.tags.add(TIT2(encoding=3, text=track_title))
            audio.tags.add(TPE1(encoding=3, text=artist_name))
            
            if track_info.albums:
                audio.tags.add(TALB(encoding=3, text=track_info.albums[0].title))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
            if track_info.cover_uri:
                cover_url = f"https://{track_info.cover_uri.replace('%%', '1000x1000')}"
                cover_data = requests.get(cover_url).content
                audio.tags.add(APIC(encoding=3, mime='image/jpeg', type=3, desc='Cover', data=cover_data))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                if track_info.lyrics:
                    audio.tags.add(USLT(encoding=3, lang='eng', desc='', text=track_info.lyrics.full_lyrics))
            except AttributeError:
                pass
            
            audio.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
            with open(filename, 'rb') as audio_file:
                await message.edit_text(f"‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é: {artist_name} - {track_title}")
                await context.bot.send_audio(
                    chat_id=message.chat.id,
                    audio=audio_file,
                    title=track_title,
                    performer=artist_name,
                    caption=f"üéµ {artist_name} - {track_title}"
                )
            
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
            if os.path.exists(filename):
                os.remove(filename)
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track_title}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track_title}: {e}")
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track_title}")
        if os.path.exists(filename):
            os.remove(filename)
        return None

async def process_music_url(url: str, message, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if client is None:
            token = context.bot_data['config'].get('yandex_music_token')
            if not token:
                await message.edit_text("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return None
            init_client(token)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        if 'track/' in url:
            track_id = url.split('track/')[-1].split('?')[0]
            track = client.tracks([track_id])[0]
            return await download_track(track, message, context)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞
        elif 'album/' in url:
            album_id = url.split('album/')[-1].split('?')[0]
            album = client.albums_with_tracks(album_id)
            total_tracks = len(album.volumes[0])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª—å–±–æ–º–µ
            await message.edit_text(
                f"üìÄ –ê–ª—å–±–æ–º: {album.title}\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {album.artists[0].name}\n"
                f"üíø –¢—Ä–µ–∫–æ–≤: {total_tracks}\n\n"
                "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫
            success_count = 0
            for i, track in enumerate(album.volumes[0], 1):
                status_msg = await context.bot.send_message(
                    chat_id=message.chat.id,
                    text=f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ {i}/{total_tracks}..."
                )
                if await download_track(track, status_msg, context):
                    success_count += 1
                await status_msg.delete()
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"üìÄ {album.title}\n"
                f"‚ú® –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{total_tracks}"
            )
            return True
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        elif 'playlist' in url or '/playlists/' in url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ playlist_id –∏–∑ URL
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏
                parts = url.replace('?utm_medium=copy_link', '').split('/')
                
                # –ò—â–µ–º ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ URL)
                playlist_id = None
                for part in reversed(parts):
                    if part.isdigit():
                        playlist_id = part
                        break
                
                if not playlist_id:
                    await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–ª–µ–π–ª–∏—Å—Ç–∞")
                    return None
                
                # –ò—â–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = None
                for i, part in enumerate(parts):
                    if part == 'users':
                        user_id = parts[i + 1]
                        break
                
                if not user_id:
                    await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
                playlist = client.users_playlists(playlist_id, user_id)
                total_tracks = len(playlist.tracks)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
                await message.edit_text(
                    f"üìù –ü–ª–µ–π–ª–∏—Å—Ç: {playlist.title}\n"
                    f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {playlist.owner.name}\n"
                    f"üéµ –¢—Ä–µ–∫–æ–≤: {total_tracks}\n\n"
                    "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
                )
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫
                success_count = 0
                for i, track_short in enumerate(playlist.tracks, 1):
                    status_msg = await context.bot.send_message(
                        chat_id=message.chat.id,
                        text=f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ {i}/{total_tracks}..."
                    )
                    if await download_track(track_short.track, status_msg, context):
                        success_count += 1
                    await status_msg.delete()
                
                # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.edit_text(
                    f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                    f"üìù {playlist.title}\n"
                    f"‚ú® –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{total_tracks}"
                )
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
                await message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:\n"
                    "https://music.yandex.ru/users/USERNAME/playlists/ID"
                )
                return None
            
        else:
            await message.edit_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏:\n"
                "‚Ä¢ –ù–∞ —Ç—Ä–µ–∫: https://music.yandex.ru/album/123456/track/123456\n"
                "‚Ä¢ –ù–∞ –∞–ª—å–±–æ–º: https://music.yandex.ru/album/123456\n"
                "‚Ä¢ –ù–∞ –ø–ª–µ–π–ª–∏—Å—Ç: https://music.yandex.ru/users/username/playlists/123456"
            )
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {str(e)}")
        return None

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data
    
    if data == "music_back":
        keyboard = [
            [InlineKeyboardButton("üíæ –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="music_download")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="music_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ Downloader\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif data == "music_download":
        await query.message.edit_text(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∞–ª—å–±–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"
        )
        context.user_data['expecting_url'] = True
    
    elif data == "music_help":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="music_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ'\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏\n"
            "3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞:\n"
            "   ‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏\n"
            "   ‚Ä¢ –ê–ª—å–±–æ–º—ã\n"
            "   ‚Ä¢ –ü–ª–µ–π–ª–∏—Å—Ç—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ https://music.yandex.ru/album/123456/track/123456\n"
            "‚Ä¢ https://music.yandex.ru/album/123456\n"
            "‚Ä¢ https://music.yandex.ru/users/username/playlists/123456",
            reply_markup=reply_markup
        )

async def music_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /music"""
    keyboard = [
        [InlineKeyboardButton("üíæ –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="music_download")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="music_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ Downloader\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('expecting_url'):
        url = update.message.text
        if 'music.yandex.ru' in url:
            status_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
            await process_music_url(url, status_message, context)
            context.user_data['expecting_url'] = False
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏")

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è"""
    app.add_handler(CommandHandler(COMMAND, music_command))
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^music_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))