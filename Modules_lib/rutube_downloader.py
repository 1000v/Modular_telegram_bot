from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from rutube import Rutube
import os
import asyncio
import time
import random
import re
import aiohttp
import json
import logging

logger = logging.getLogger(__name__)

COMMAND = 'rutube'
COMMAND_DESCRIPTION = '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å Rutube'

__version__ = "1.0.0"
__doc__ = "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å Rutube"
__dependencies__ = ["aiohttp", "rutube"]

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
FILE_HOSTS = [
    {
        'name': 'file.io',
        'url': 'https://file.io/',
        'field_name': 'file',
        'link_key': 'link',
        'success_key': 'success'
    },
    {
        'name': 'tmpfiles.org',
        'url': 'https://tmpfiles.org/api/v1/upload',
        'field_name': 'file',
        'link_key': 'data.url',
        'success_key': 'status'
    }
]

# –ó–∞–±–∞–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
UPLOAD_MESSAGES = [
    "–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ–±–ª–∞–∫–æ... ‚òÅÔ∏è",
    "–ü–∞–∫—É–µ–º –±–∞–π—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—É—é –æ–±–µ—Ä—Ç–∫—É... üéÅ",
    "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Å–µ—Ç–∏... üöÄ",
    "–ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—Å... üîó",
    "–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤... üì°",
    "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... ‚åõ",
]

# –ó–∞–±–∞–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
DOWNLOAD_MESSAGES = [
    "üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...",
    "üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å Rutube...",
    "üéØ –ì–æ—Ç–æ–≤–∏–º –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ...",
    "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ...",
    "üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—Å...",
    "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏...",
]

class RutubeDownloader:
    def __init__(self):
        self.user_urls = {}
        self.downloads_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'downloads')
        os.makedirs(self.downloads_dir, exist_ok=True)

    async def update_progress(self, message, current, total, start_time, messages):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            progress = current / total * 100
            elapsed = time.time() - start_time
            speed = current / (1024 * 1024 * elapsed) if elapsed > 0 else 0
            eta = int((total - current) / (current / elapsed) if current > 0 else 0)
            
            message_index = int(elapsed / 15) % len(messages)
            status_text = f"{messages[message_index]}\n"
            status_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
            status_text += f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} MB/s\n"
            status_text += f"–û—Å—Ç–∞–ª–æ—Å—å: {eta} —Å–µ–∫"
            
            await message.edit_text(status_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    async def upload_to_fileio(self, file_path: str, progress_msg, context) -> str:
        """Upload file to file.io and return download link"""
        try:
            file_size = os.path.getsize(file_path)
            start_time = time.time()
            last_update = start_time
            last_size = 0
            upload_complete = False
            message_index = 0
            
            # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ (—Å –∑–∞–ø–∞—Å–æ–º –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 255)
            filename = os.path.basename(file_path)
            if len(filename) > 50:
                name, ext = os.path.splitext(filename)
                filename = name[:46] + "..." + ext
            
            logger.info(f"Uploading file: {filename}")
            
            async def update_progress():
                nonlocal last_update, last_size, message_index
                while not upload_complete:
                    try:
                        current_time = time.time()
                        elapsed = current_time - start_time
                        
                        if current_time - last_update >= 2:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                            current_size = last_size + 1024 * 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1MB
                            if current_size > file_size:
                                current_size = file_size
                                
                            progress = min(current_size / file_size * 100, 100)
                            speed = (current_size - last_size) / (current_time - last_update) / 1024 / 1024  # MB/s
                            
                            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            filled = int(progress / 10)
                            progress_bar = f"{'‚ñà' * filled}{'_' * (10 - filled)}"
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                            message_index = int(elapsed / 15) % len(UPLOAD_MESSAGES)
                            fun_message = UPLOAD_MESSAGES[message_index]
                            
                            await progress_msg.edit_text(
                                f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {filename}\n"
                                f"[{progress_bar}] {int(progress)}%\n"
                                f"‚ö° {speed:.1f} MB/s\n\n"
                                f"üí≠ {fun_message}"
                            )
                            
                            last_size = current_size
                            last_update = current_time
                        
                        await asyncio.sleep(0.5)
                    except Exception as e:
                        logger.error(f"Error in progress update: {e}")
                        await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            progress_task = asyncio.create_task(update_progress())
            
            # –î–æ–±–∞–≤–ª—è–µ–º user agent –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Origin': 'https://file.io',
                'Referer': 'https://file.io/'
            }
            
            async with aiohttp.ClientSession(headers=headers) as session:
                with open(file_path, 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename=filename)
                    data.add_field('expires', '24h')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ 24 —á–∞—Å–æ–≤
                    
                    async with session.post('https://file.io', data=data) as response:
                        result = await response.json()
                        upload_complete = True
                        logger.info(f"File.io response: {result}")
                        
                        if response.status == 200 and result.get('success'):
                            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            await progress_task
                            
                            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await progress_msg.edit_text(
                                f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                f"[{'‚ñà' * 10}] 100%\n"
                                f"üìÅ –§–∞–π–ª: {filename}\n"
                                f"‚è± –í—Ä–µ–º—è: {int(time.time() - start_time)} —Å–µ–∫"
                            )
                            await asyncio.sleep(2)
                            return result.get('link')
                        else:
                            error_msg = result.get('message', 'Unknown error')
                            logger.error(f"File.io upload failed: {error_msg}")
            
            upload_complete = True
            await progress_task
        except Exception as e:
            logger.error(f"Error uploading to file.io: {e}")
            if 'progress_task' in locals():
                progress_task.cancel()
        return None

    async def send_file(self, file_path: str, message, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ file.io
            cloud_link = await self.upload_to_fileio(file_path, message, context)
            
            if cloud_link:
                await message.edit_text(
                    f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {cloud_link}\n\n"
                    f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞"
                )
                return

            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ–±–ª–∞–∫–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
            file_size = os.path.getsize(file_path)
            with open(file_path, 'rb') as video_file:
                await context.bot.send_video(
                    chat_id=message.chat_id,
                    video=video_file,
                    caption="–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ!"
                )
            await message.delete()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ")

    async def download_rutube_video(self, url: str, resolution: str, msg, context, title: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"""
        start_time = time.time()
        file_path = None
        
        try:
            rt = Rutube(url)
            
            if resolution == "best":
                video = rt.get_best()
            else:
                video = rt.get_by_resolution(int(resolution))
            
            if not video:
                await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ")
                return
            
            safe_title = self.sanitize_filename(title)
            file_path = os.path.join(self.downloads_dir, f"{safe_title}_{resolution}p_{int(time.time())}.mp4")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_message = "üé¨ –ù–∞—á–∞–ª –∑–∞–≥—Ä—É–∂–∞—Ç—å..."
            current_message = msg.text if msg.text else ""
            
            if current_message != initial_message:
                await msg.edit_text(initial_message)
            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ DOWNLOAD_MESSAGES, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤–æ–µ
            download_msg = random.choice(DOWNLOAD_MESSAGES[1:])
            if current_message != download_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                await msg.edit_text(download_msg)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            with open(file_path, 'wb') as f:
                video.download(stream=f)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_file(file_path, msg, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            await msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        
        finally:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if file_path and os.path.exists(file_path):
                try:
                    # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    await asyncio.sleep(2)
                    os.remove(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    asyncio.create_task(self.delayed_file_cleanup(file_path))

    async def delayed_file_cleanup(self, file_path: str, max_attempts: int = 3):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        attempt = 0
        while attempt < max_attempts:
            await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    break
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                attempt += 1

    async def rutube_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rutube"""
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å Rutube, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –µ–≥–æ —Å–∫–∞—á–∞—Ç—å!"
        )

    async def handle_rutube_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –æ—Ç Rutube"""
        message = update.message
        url = message.text.strip()
        
        if not url.startswith(('https://rutube.ru', 'http://rutube.ru')):
            await message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å Rutube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return

        loading_msg = await message.reply_text("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
        
        try:
            rt = Rutube(url)
            resolutions = rt.available_resolutions
            
            if not resolutions:
                await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.user_urls[update.effective_user.id] = {
                'url': url,
                'title': 'video'  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
            keyboard = []
            for res in sorted(resolutions):
                keyboard.append([
                    InlineKeyboardButton(
                        f"{res}p",
                        callback_data=f"rutube_{res}"
                    )
                ])
            keyboard.append([
                InlineKeyboardButton(
                    "üéØ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                    callback_data="rutube_best"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await loading_msg.edit_text(
                f"üé• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {', '.join(f'{r}p' for r in sorted(resolutions))}",
                reply_markup=reply_markup
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}")
            await loading_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ")

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if not query.data.startswith('rutube_'):
            return
        
        user_id = update.effective_user.id
        if user_id not in self.user_urls:
            await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        url_data = self.user_urls[user_id]
        loading_msg = await query.edit_message_text("üé¨ –ù–∞—á–∞–ª –∑–∞–≥—Ä—É–∂–∞—Ç—å...")
        
        try:
            resolution = query.data.split('_')[1]  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 'best' –∏–ª–∏ —á–∏—Å–ª–æ
            await self.download_rutube_video(
                url_data['url'],
                resolution,
                loading_msg,
                context,
                url_data['title']
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
            await loading_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_urls.pop(user_id, None)

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message and update.message.text:
            if 'rutube.ru' in update.message.text.lower():
                await self.handle_rutube_url(update, context)

    @staticmethod
    def sanitize_filename(filename):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(filename) > 200:
            name, ext = os.path.splitext(filename)
            filename = name[:196] + ext
        return filename

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è"""
    rutube_downloader = RutubeDownloader()
    app.add_handler(CommandHandler(COMMAND, rutube_downloader.rutube_command))
    app.add_handler(CallbackQueryHandler(rutube_downloader.handle_button, pattern='^rutube_'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, rutube_downloader.message_handler))