from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler
import os
import shutil
from datetime import datetime
import time
import asyncio
from concurrent.futures import ThreadPoolExecutor
from functools import lru_cache
import logging
import hashlib
import aiohttp
import json
from typing import Optional, Tuple
import random

logger = logging.getLogger(__name__)

COMMAND = 'files'
COMMAND_DESCRIPTION = '–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (Windows)'

__version__ = "1.0.0"
__doc__ = "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (Windows)"
__dependencies__ = ["aiohttp", "shutil"]  # optional

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
SPAM_INTERVAL = 5
last_command_time = {}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
file_thread_pool = ThreadPoolExecutor(max_workers=4)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Ç–µ–π
path_cache = {}

def generate_path_id(path: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ø—É—Ç–∏"""
    hash_object = hashlib.md5(path.encode())
    return hash_object.hexdigest()[:8]

def store_path(path: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    path_id = generate_path_id(path)
    path_cache[path_id] = path
    return path_id

def get_path(path_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –ø–æ –µ–≥–æ ID"""
    return path_cache.get(path_id)

@lru_cache(maxsize=10)
def get_drives():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è)"""
    return [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 
            if os.path.exists(f"{d}:")]

def check_spam(user_id: int, command_type: str = "command") -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    command_type: 
        - "command" - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç—Ä–µ–±—É—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏)
        - "navigation" - –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
    """
    if command_type == "navigation":
        return False
        
    current_time = time.time()
    if user_id in last_command_time:
        if current_time - last_command_time[user_id] < SPAM_INTERVAL:
            return True
    last_command_time[user_id] = current_time
    return False

def format_size(size: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if size < 1024:
            return f"{size:.1f} {unit}"
        size /= 1024
    return f"{size:.1f} –¢–ë"

async def get_directory_contents(path: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        loop = asyncio.get_event_loop()
        items = await loop.run_in_executor(file_thread_pool, os.listdir, path)
        
        dirs = []
        files = []
        
        async def process_item(item):
            try:
                full_path = os.path.join(path, item)
                if await loop.run_in_executor(file_thread_pool, os.path.isdir, full_path):
                    dirs.append((item, store_path(full_path)))
                else:
                    files.append((item, store_path(full_path)))
            except (PermissionError, FileNotFoundError):
                pass

        tasks = [process_item(item) for item in items]
        await asyncio.gather(*tasks)
                
        return sorted(dirs), sorted(files)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")
        return [], []

async def read_file_content(path: str, max_size: int = 1024 * 1024) -> tuple[str, bool]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    try:
        loop = asyncio.get_event_loop()
        size = await loop.run_in_executor(file_thread_pool, os.path.getsize, path)
        
        if size > max_size:
            return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", False
            
        async def read_file():
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    return f.read(4000)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            except UnicodeDecodeError:
                raise ValueError("–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª")
                
        content = await loop.run_in_executor(file_thread_pool, read_file)
        truncated = len(content) >= 4000
        
        if truncated:
            content = content[:4000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
        return content, truncated
    except ValueError as e:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
        raise

async def delete_item(path: str) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏"""
    try:
        loop = asyncio.get_event_loop()
        if await loop.run_in_executor(file_thread_pool, os.path.isfile, path):
            await loop.run_in_executor(file_thread_pool, os.remove, path)
        else:
            await loop.run_in_executor(file_thread_pool, shutil.rmtree, path)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        return False

async def list_directory(update: Update, context, current_path=None):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    
    if not current_path:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
        keyboard = []
        for drive in get_drives():
            drive_id = store_path(drive)
            keyboard.append([InlineKeyboardButton(
                f"üíø –î–∏—Å–∫ {drive}", 
                callback_data=f"files_open:{drive_id}"
            )])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="files_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", reply_markup=reply_markup)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
    dirs, files = await get_directory_contents(current_path)
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏
    for name, path_id in dirs:
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {name[:30]}", 
            callback_data=f"files_open:{path_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    for name, path_id in files:
        keyboard.append([InlineKeyboardButton(
            f"üìÑ {name[:30]}", 
            callback_data=f"files_open:{path_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Ä—Ö"
    parent = os.path.dirname(current_path)
    if parent != current_path:
        parent_id = store_path(parent)
        keyboard.append([InlineKeyboardButton(
            "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", 
            callback_data=f"files_open:{parent_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="files_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÇ –ü–∞–ø–∫–∞: {current_path}\n–§–∞–π–ª–æ–≤: {len(files)}, –ü–∞–ø–æ–∫: {len(dirs)}",
        reply_markup=reply_markup
    )

async def handle_button(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    
    try:
        data = query.data
        user_id = update.effective_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        command_type = "navigation" if data.startswith(("files_list", "files_open:")) else "command"
        
        if check_spam(user_id, command_type):
            await query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π!", show_alert=True)
            return

        if data == "files_list":
            current_path = context.user_data.get('current_path')
            await list_directory(update, context, current_path)

        elif data.startswith("files_open:"):
            path_id = data.split(":", 1)[1]
            path = get_path(path_id)
            if not path:
                await query.answer("–û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            context.user_data['current_path'] = path
            
            loop = asyncio.get_event_loop()
            is_file = await loop.run_in_executor(file_thread_pool, os.path.isfile, path)
            
            if is_file:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                stats = await loop.run_in_executor(file_thread_pool, os.stat, path)
                text = (
                    f"üìÑ –§–∞–π–ª: {os.path.basename(path)}\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {format_size(stats.st_size)}\n"
                    f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"files_download:{path_id}"),
                        InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"files_launch:{path_id}")
                    ],
                    [InlineKeyboardButton("üìÇ –ù–∞–∑–∞–¥", callback_data="files_list")]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(text, reply_markup=reply_markup)
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É
                await list_directory(update, context, path)

        elif data.startswith("files_download:"):
            path_id = data.split(":", 1)[1]
            path = get_path(path_id)
            if path:
                await handle_file_download(update, context, path)
            else:
                await query.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        elif data.startswith("files_launch:"):
            path_id = data.split(":", 1)[1]
            path = get_path(path_id)
            if path:
                success, message = await launch_file(path)
                await query.answer(message, show_alert=True)
            else:
                await query.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        elif data.startswith("files_read:"):
            path_id = data.split(":", 1)[1]
            path = get_path(path_id)
            if not path:
                await query.answer("–û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            try:
                content, truncated = await read_file_content(path)
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"files_open:{path_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üìÑ {os.path.basename(path)}:\n\n```\n{content}\n```",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except ValueError as e:
                await query.answer(str(e), show_alert=True)
            except Exception as e:
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)}", show_alert=True)

        elif data.startswith("files_delete:"):
            path_id = data.split(":", 1)[1]
            path = get_path(path_id)
            if not path:
                await query.answer("–û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            if await delete_item(path):
                await query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
                # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
                parent_dir = os.path.dirname(path)
                context.user_data['current_path'] = parent_dir
                await list_directory(update, context, parent_dir)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

        elif data == "files_back":
            context.user_data['current_path'] = None
            keyboard = [
                [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="files_list")],
                [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="files_mkdir")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_button: {str(e)}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def files_command(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user_id = update.effective_user.id
    
    if check_spam(user_id, "command"):
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π!")
        return

    keyboard = [
        [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="files_list")],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="files_mkdir")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (Windows)\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def upload_to_fileio(file_path: str, update: Update, context) -> Optional[str]:
    """Upload file to file.io and return download link"""
    try:
        file_size = os.path.getsize(file_path)
        loading_messages = context.application.bot_data.get('loading_messages', ["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..."])
        progress_message = await update.callback_query.message.reply_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞–ª–∞—Å—å...\n"
            f"[{'_' * 10}] 0%\n"
            f"‚ö° 0 MB/s\n\n"
            f"üí≠ {random.choice(loading_messages)}"
        )
        
        start_time = time.time()
        last_update = start_time
        last_size = 0
        message_index = 0
        upload_complete = False
        
        async def update_progress():
            nonlocal last_update, last_size, message_index
            while not upload_complete:
                try:
                    current_time = time.time()
                    elapsed = current_time - start_time
                    
                    if current_time - last_update >= 2:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                        current_size = last_size + 1024 * 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1MB
                        if current_size > file_size:
                            current_size = file_size
                            
                        progress = min(current_size / file_size * 100, 100)
                        speed = (current_size - last_size) / (current_time - last_update) / 1024 / 1024  # MB/s
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        filled = int(progress / 10)
                        progress_bar = f"{'‚ñà' * filled}{'_' * (10 - filled)}"
                        
                        # –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if int(elapsed) % 15 == 0 and elapsed > 0:
                            message_index = (message_index + 1) % len(loading_messages)
                        
                        await progress_message.edit_text(
                            f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}\n"
                            f"[{progress_bar}] {progress:.1f}%\n"
                            f"‚ö° {speed:.1f} MB/s\n\n"
                            f"üí≠ {loading_messages[message_index]}"
                        )
                        
                        last_size = current_size
                        last_update = current_time
                    
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.error(f"Error in progress update: {e}")
                    await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        progress_task = asyncio.create_task(update_progress())
        
        async with aiohttp.ClientSession() as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f)
                data.add_field('expires', '30m')
                
                async with session.post('https://file.io', data=data) as response:
                    result = await response.json()
                    upload_complete = True
                    
                    if response.status == 200:
                        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        await progress_task
                        
                        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await progress_message.edit_text(
                            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                            f"[{'‚ñà' * 10}] 100%\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"‚è± –í—Ä–µ–º—è: {int(time.time() - start_time)} —Å–µ–∫"
                        )
                        await asyncio.sleep(2)
                        await progress_message.delete()
                        return result.get('link')
        
        upload_complete = True
        await progress_task
        await progress_message.delete()
    except Exception as e:
        logger.error(f"Error uploading to file.io: {e}")
        if 'progress_message' in locals():
            await progress_message.delete()
        if 'progress_task' in locals():
            progress_task.cancel()
    return None

async def handle_file_download(update: Update, context, file_path: str) -> None:
    """Handle file download based on size"""
    try:
        file_size = os.path.getsize(file_path)
        max_file_size = 50 * 1024 * 1024  # Default 50MB
        
        if hasattr(context.application.bot_data, 'config'):
            max_file_size = context.application.bot_data.config.get('max_file_size', max_file_size)
        
        if file_size > max_file_size:
            link = await upload_to_fileio(file_path, update, context)
            if link:
                await update.callback_query.message.reply_text(
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
                    f"üìé –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç):\n{link}"
                )
            else:
                await update.callback_query.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            progress_message = await update.callback_query.message.reply_text(
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é...\n"
                f"[{'_' * 10}] 0%"
            )
            
            start_time = time.time()
            try:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=open(file_path, 'rb'),
                    filename=os.path.basename(file_path),
                    progress=lambda current, total: asyncio.create_task(
                        update_progress(progress_message, current, total, start_time)
                    )
                )
            finally:
                await progress_message.delete()
            
    except Exception as e:
        await update.callback_query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def update_progress(message, current, total, start_time):
    """Update progress message for direct file sending"""
    try:
        progress = min(current / total * 100, 100)
        filled = int(progress / 10)
        progress_bar = f"{'‚ñà' * filled}{'_' * (10 - filled)}"
        
        elapsed = time.time() - start_time
        speed = current / elapsed / 1024 / 1024  # MB/s
        
        await message.edit_text(
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...\n"
            f"[{progress_bar}] {progress:.1f}%\n"
            f"‚ö° {speed:.1f} MB/s"
        )
    except Exception as e:
        logger.error(f"Error updating progress: {e}")

async def launch_file(file_path: str) -> Tuple[bool, str]:
    """Launch a file using the default system application"""
    try:
        os.startfile(file_path)
        return True, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è"""
    app.add_handler(CommandHandler(COMMAND, files_command))
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^files_"))