# modules/download_manager.py
from telegram import Update
import aiohttp
import os
from urllib.parse import urlparse, unquote
import re
import mimetypes

COMMAND = 'download'
COMMAND_DESCRIPTION = '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <url> [–∏–º—è_—Ñ–∞–π–ª–∞]'

__version__ = "1.0.0"
__doc__ = "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
__dependencies__ = ["aiohttp"]  # optional

def sanitize_filename(filename):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (Windows –Ω–µ –ª—é–±–∏—Ç —Ç–∞–∫–∏–µ —Ñ–∞–π–ª—ã)
    filename = filename.lstrip('.')
    return filename if filename else 'downloaded_file'

def get_filename_from_url(url, content_disposition=None, content_type=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    filename = None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ Content-Disposition
    if content_disposition:
        try:
            filename_match = re.search(r'filename=["\'](.*?)["\']', content_disposition)
            if filename_match:
                filename = filename_match.group(1)
        except Exception:
            pass
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø—Ä–æ–±—É–µ–º –∏–∑ URL
    if not filename:
        parsed_url = urlparse(url)
        path = unquote(parsed_url.path)
        filename = os.path.basename(path)
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if not filename and content_type:
        ext = mimetypes.guess_extension(content_type.split(';')[0].strip())
        if ext:
            filename = f'downloaded_file{ext}'
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
    if not filename:
        filename = 'downloaded_file'
    
    return sanitize_filename(filename)

async def download_command(update: Update, context):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    user_message = update.message.text.split()
    if len(user_message) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <url> [–∏–º—è_—Ñ–∞–π–ª–∞]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/download https://example.com/file.pdf\n"
            "/download https://example.com/file.pdf my_file.pdf"
        )
        return
    
    url = user_message[1]
    custom_filename = user_message[2] if len(user_message) > 2 else None
    
    try:
        status_message = await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    content = await response.read()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    if custom_filename:
                        filename = sanitize_filename(custom_filename)
                    else:
                        content_disposition = response.headers.get('Content-Disposition')
                        content_type = response.headers.get('Content-Type')
                        filename = get_filename_from_url(url, content_disposition, content_type)
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é downloads, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    os.makedirs('downloads', exist_ok=True)
                    
                    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    filepath = os.path.join('downloads', filename)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    with open(filepath, 'wb') as f:
                        f.write(content)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
                    file_size = os.path.getsize(filepath) / (1024 * 1024)
                    
                    await status_message.edit_text(
                        f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω\n"
                        f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {filename}\n"
                        f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} –ú–ë\n"
                        f"üìÇ –ü—É—Ç—å: {filepath}"
                    )
                else:
                    await status_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏\n"
                        f"–°—Ç–∞—Ç—É—Å: {response.status}\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {response.reason}"
                    )
    except aiohttp.ClientError as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")