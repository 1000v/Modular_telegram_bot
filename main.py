from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import NetworkError, TimedOut
import json
import logging
import os
import importlib
import inspect
import asyncio
from concurrent.futures import ThreadPoolExecutor
import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
thread_pool = ThreadPoolExecutor(max_workers=4)

# –ó–∞–±–∞–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
LOADING_MESSAGES = [
    "–û–±—É—á–∞–µ–º —Ö–æ–º—è–∫–æ–≤ –±–µ–≥–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏... üêπ",
    "–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –±–∞–π—Ç—ã –≤ —É–≥–ª–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... üßπ",
    "–£–±–µ–∂–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫ —É–∂ –∏ –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö... ü§î",
    "–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤–∞—à —Ñ–∞–π–ª –≤ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≥–æ–ª—É–±–µ–π... üïäÔ∏è",
    "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–¥–Ω–æ–π –±–∞–±—É—à–∫–∏ –≤ —á–∞—Å... üëµ",
    "–ü–∏–Ω–∞–µ–º —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω —Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ... ü¶∂",
    "–†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –±–∏—Ç—ã –ø–æ –ø–æ–ª–æ—á–∫–∞–º... üìö",
    "–ì–æ—Ç–æ–≤–∏–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–ª–µ–ø–æ—Ä—Ç... üåÄ",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥—ë—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞... –≤ –≤–∞–∫—É—É–º–µ... –≤ –∂–µ–ª–µ... üåü",
    "–£–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å... üêå",
    "–ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–æ—Ç–æ–≤—É—é –Ω–æ—Ä—É... üï≥Ô∏è",
    "–§–∞–π–ª —Ä–µ—à–∏–ª —É—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–±–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ... ‚òï",
    "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–¥–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –≤ –º–∏–Ω—É—Ç—É... üê¢",
    "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—á—Ç–æ–≤—ã—Ö –≥–æ–ª—É–±–µ–π —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏... üïäÔ∏è",
    "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–∞—Ç—Ä–∏—Ü–µ... üíä",
    "–ê –∑–∞—á–µ–º –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º...?... ü§∑‚Äç‚ôÄÔ∏è",
    "–ê —è –∑–Ω–∞—é —á—Ç–æ —Ç—ã ...",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ì–ª–∞–≤–Ω—é–∫–∞",
]

# Command settings
COMMAND = "start"
COMMAND_DESCRIPTION = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"

class TelegramBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open('config.json', 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.app = Application.builder().token(self.config['bot_token'])\
            .connect_timeout(30)\
            .read_timeout(30)\
            .write_timeout(30)\
            .pool_timeout(30)\
            .build()
            
        # Store config in bot_data for access from modules
        self.app.bot_data['config'] = self.config
        self.app.bot_data['loading_messages'] = LOADING_MESSAGES
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–æ–¥—É–ª–µ–π
        self.modules = {}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
        self.load_modules()
        
    def check_user_access(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return str(user_id) in self.config['allowed_users']

    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        try:
            if isinstance(context.error, (NetworkError, TimedOut)):
                # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏ - –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {context.error}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
                return
            
            logger.error(f'Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}')
            
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_name = user.first_name
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modules
        module_dir = os.path.join(os.path.dirname(__file__), 'modules')
        module_files = [f[:-3] for f in os.listdir(module_dir) 
                       if f.endswith('.py') and not f.startswith('__')]
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        commands = []
        for module_name in module_files:
            try:
                module = __import__(f'modules.{module_name}', fromlist=['COMMAND', 'COMMAND_DESCRIPTION'])
                if hasattr(module, 'COMMAND') and hasattr(module, 'COMMAND_DESCRIPTION'):
                    commands.append(f"/{module.COMMAND} - {module.COMMAND_DESCRIPTION}")
            except (ImportError, AttributeError) as e:
                logger.debug(f"–ú–æ–¥—É–ª—å {module_name} –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands.append(f"/{COMMAND} - {COMMAND_DESCRIPTION}")
        
        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            f"{chr(10).join(commands)}\n\n"
            "üöÄ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        
        await update.message.reply_text(welcome_message)

    async def button_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()

            if query.data.startswith("module_"):
                command = query.data.replace("module_", "")
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
                for module in self.modules.values():
                    if hasattr(module, 'COMMAND') and module.COMMAND == command:
                        try:
                            if hasattr(module, 'handle_button'):
                                await module.handle_button(update, context)
                            else:
                                await query.message.reply_text(
                                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{command} –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –º–æ–¥—É–ª—è {command}: {str(e)}")
                            await query.message.reply_text(
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {str(e)}")

    def load_modules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modules"""
        modules_dir = 'modules'
        if not os.path.exists(modules_dir):
            os.makedirs(modules_dir)
            return

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modules
        for filename in os.listdir(modules_dir):
            if filename.endswith('.py') and not filename.startswith('__'):
                module_name = filename[:-3]
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                    module = importlib.import_module(f'modules.{module_name}')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                    if all(hasattr(module, attr) for attr in ['COMMAND', 'COMMAND_DESCRIPTION']):
                        self.modules[module_name] = module
                        logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: {module_name}')
                    else:
                        logger.warning(f'–ú–æ–¥—É–ª—å {module_name} –ø—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã')
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {module_name}: {str(e)}')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler(COMMAND, self.start))
        self.app.add_handler(CallbackQueryHandler(self.button_handler, pattern="^module_"))
        self.app.add_error_handler(self.error_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
        for module_name, module in self.modules.items():
            if hasattr(module, 'register_handlers'):
                module.register_handlers(self.app)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ register_handlers, –∏—â–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Ö –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
                for name, obj in inspect.getmembers(module):
                    if inspect.iscoroutinefunction(obj) and name.endswith('_command'):
                        command = getattr(module, 'COMMAND', name.replace('_command', ''))
                        self.app.add_handler(CommandHandler(command, obj))
                        logger.info(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command} –∏–∑ –º–æ–¥—É–ª—è {module_name}')

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            pool_timeout=30,
            read_timeout=30,
            connect_timeout=30,
            write_timeout=30
        )

if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()